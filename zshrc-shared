# ------------------------------------------------
# COLORS -----------------------------------------
# ------------------------------------------------
# 30 - black
# 31 - red
# 32 - green
# 33 - yellow
# 34 - blue
# 35 - magenta
# 36 - cyan
# 37 - white
# 
# 0 - normal
# 1 - bold
# 2 - normal again
# 3 - background color
# 4 - underline the text
# 5 - blinking

# ------------------------------------------------
# ZSH->CONFIGURATION -----------------------------
# ------------------------------------------------
autoload -U compinit
autoload zsh/terminfo
autoload colors && colors

# Initialize for compdef
compinit

# Allow for functions in the prompt
setopt promptsubst
setopt prompt_subst

# Enable auto-execution of functions.
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

setopt nohup
setopt no_check_jobs
setopt extendedglob
setopt extended_glob
setopt no_nomatch
setopt alwaystoend

bindkey -e

HISTSIZE=100
SAVEHIST=100
HISTFILE=~/.history

export EDITOR="vim"

# ------------------------------------------------
# UTILITY->SOURCING ------------------------------
# ------------------------------------------------
alias resource="source ~/.zshrc"

function source-if-exists()
{
  _path=$1

  if [[ -f $_path ]] ; then
    source $_path
  fi
}

# ------------------------------------------------
# PATHS ------------------------------------------
# ------------------------------------------------
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:$HOME/.bin/bin
export PATH=$PATH:$HOME/.bin/.bin
export PATH=$PATH:$HOME/.gexecute
export PATH=$PATH:$HOME/.android/bin
export PATH=$PATH:$HOME/.android/platform-tools
export PATH=$PATH:$HOME/.neo4j-bin
export PATH=$PATH:$HOME/.repositories/mkdir-scripts/bin

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib

# ------------------------------------------------
# OS ---------------------------------------------
# ------------------------------------------------
export ON_DARWIN=false
export ON_LINUX=false

case `uname` in
  "Darwin")
    ON_DARWIN=true
    ;;
  "Linux")
    ON_LINUX=true
    ;;
esac

# ------------------------------------------------
# UNIX -------------------------------------------
# ------------------------------------------------
if ( $ON_DARWIN ) ; then
  alias l="ls -lh -G"
  alias ls="ls -G"
  alias la="ls -lha -G"
  alias lf="ls -lh -G | grep -i"
  alias lfa="ls -lha -G | grep -i"
else
  alias l="ls -lh --color"
  alias ls="ls --color"
  alias la="ls -lha --color"
  alias lf="ls -lh --color | grep -i"
  alias lfa="ls -lha --color | grep -i"
fi

alias lc="ls -1 | wc -l"
alias b="cd .."
alias f="cd -"
alias x="exit"
alias c="clear"
alias sd="sudo"
alias s="sudo su"
#alias d="date && cal"
alias reboot="sudo reboot"
alias halt="sudo halt"
alias ts="du -sh"
alias grep="grep --color"
alias lsdir="ls -d */"
alias lsadir="ls -d .*/"
alias rs="clear; rspec --format nested --color $*"

psg()
{
  if [[ -z $1 ]] ; then
    echo "$0: usage: QUERY"
  fi
}
mw()
{
  mv "$@" && cd "${@[-1]}";
}
gst()
{
  grep -IHiRe $1 ./ ;
}
fnd()
{
  find ./ -iname "*$1*" ;
}

# ------------------------------------------------
# SCREEN -----------------------------------------
# ------------------------------------------------
alias torrent="screen -d -R torrent"
alias music="screen -d -R music"
alias video="screen -d -R video"
alias audio="screen -d -R audio"
alias media="screen -d -R media"
alias dvd="screen -d -R dvd"

# ------------------------------------------------
# HEROKU -----------------------------------------
# ------------------------------------------------
function h()
{
  case "$1" in
    # console (production)
    c)
    heroku run console
    ;;
    # console (development)
    cd)
    heroku run console RAILS_ENV=development
    ;;
    # config
    co)
    heroku config
    ;;
    # logs
    l)
    heroku logs
    ;;
    # default
    *)
    heroku $*
    ;;
  esac
}

# ------------------------------------------------
# SHARED -----------------------------------------
# ------------------------------------------------
pull-shared-file()
{
    file_owner=$1
    file_group=$2
    file_permissions=$3
    file_shared_name=$4
    file_end_path=$5

    scp linode:~/.shared/$file_shared_name ~/.shared/tmp-to-mv

    sudo mv ~/.shared/tmp-to-mv $file_end_path

    sudo chmod $file_permissions $file_end_path
    sudo chown $file_owner:$file_group $file_end_path 
}

pull-ssh-config()
{
    pull-shared-file $USER $USER 0644 ssh-config ~/.ssh/config
}

pull-zshrc-shared()
{
    pull-shared-file root root 0644 zshrc-shared /etc/zshrc-shared
}

# ------------------------------------------------
# OPEN -------------------------------------------
# ------------------------------------------------
#function o()
#{
    #if [[ -z $1 ]] ; then
        #echo "usage: $0:"
        #return 1
    #fi

    #file=$1

    #if [[ ! -f $file ]] ; then
        #echo "fatal: File does not exist or is not ordinary (i.e., directory or symbolic link)"
        #return 1
    #fi

    #case $file in
        ## evince
        #*.(pdf|png|jpg))
        #evince $file
        #;;
        ## gimp
        #*.(xcf))
        #gimp $file
        #;;
        ## dia
        #*.(dia))
        #dia $file
        #;;
        ## inkscape
        #*.(svg))
        #inkscape $file
        #;;
        ## word
        #*.(doc|docx|docm))
        #word $file
        #;;
        ## excel
        #*.(xls|xlsx|xlsm))
        #excel $file
        #;;
        ## powerpoint
        #*.(ppt|pptx|pptm))
        #powerpoint $file
        #;;
        ## default
        #*)
        #echo "fatal: Not a supported filetype"
        #return 1
        #;;
    #esac
#}

# ------------------------------------------------
# RUN --------------------------------------------
# ------------------------------------------------
function r() {
  if [[ ! -x ./run ]] ; then
    echo "fatal: ./run does not exist or is not executable."
    exit 1
  fi

  clear
  ./run $*
}

# ------------------------------------------------
# MISC. ------------------------------------------
# ------------------------------------------------
alias t="tree -C"
alias td="tree -C -d"
alias update="sudo apt-get update && sudo apt-get dist-upgrade"
alias apt-get="sudo apt-get"
alias service="sudo service"
alias dpkg="sudo dpkg"
alias mp="mplayer -fs"
alias ra="clear && ./reset-all"
alias use-opendns="sudo cp /etc/resolv.conf.opendns /etc/resolv.conf"
alias use-google-dns="sudo cp /etc/resolv.conf.google /etc/resolv.conf"
alias sync-time-sunnyvale="sudo ntpdate tick.ucla.edu"
alias sync-time-boulder="sudo ntpdate utcnist.colorado.edu"
alias sync-time-chicago="sudo ntpdate ntp-1.mcs.anl.gov"
alias wake="export DISPLAY=:0.0 && xset dpms force on"
alias blank="export DISPLAY=:0.0 && xset dpms force off"
alias expdisp="export DISPLAY=:0.0"
alias emacs="emacs -nw"
alias slime="emacs -nw -f slime"
alias push="./push $*"
alias rails-env-production="export RAILS_ENV=production"
alias rails-env-development="export RAILS_ENV=development"
alias re-p="rails-env-production"
alias re-d="rails-env-development"
alias rails-env-test="export RAILS_ENV=test"
alias v="vim-all"
alias dv="ssh desktop-virtual"
alias docker="sudo docker"
alias o="ofe"

if ( $ON_DARWIN ) ; then
  alias htop="sudo htop"
fi

# Prevent C-s from hanging terminal
# http://unix.stackexchange.com/questions/72086/ctrl-s-hang-terminal-emulator
stty -ixon

# startx
sx()
{
  startx &

  sleep 1.5

  export DISPLAY=:0.0

  if [[ $1 == "m" ]] ; then
    display-mode monitor
  else
    display-mode no-monitor
  fi
}

# extract
ex()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
        return 1
    fi
}

rsync-partial()
{
    rsync --partial --progress --rsh=ssh $*
}

# ------------------------------------------------
# PROMPTS ----------------------------------------
# ------------------------------------------------
if [[ $USER == "root" ]] ; then
    PROMPT=$'%{\e[31m%}%m# %{\e[0m%}'
elif [[ $HOST == "linode-personal" ]] ; then
    PROMPT=$'%{\e[34m%}linode%{\e[1;32m%}(personal)$ %{\e[0m%}'
elif [[ $HOST == "linode-prelang" ]] ; then
    PROMPT=$'%{\e[34m%}linode%{\e[1;36m%}(prelang)$ %{\e[0m%}'
elif [[ $HOST == "desktop-erik" ]] ; then
    PROMPT=$'%{\e[35m%}desktop$ %{\e[0m%}'
elif ( $ON_DARWIN ) ; then
    PROMPT=$'\xEF\xA3\xBF %{\e[34m%}%m$ %{\e[0m%}'
else
    PROMPT=$'%{\e[32m%}%m$ %{\e[0m%}'
fi

# Right-hand prompt
RPROMPT="%{$fg_bold[black]%}%~%{$reset_color%}"

# Terminal.app has problems with bold black (grey).
if ( $ON_DARWIN ) ; then
  RPROMPT="%{$fg[white]%}%~%{$reset_color%}"
fi


