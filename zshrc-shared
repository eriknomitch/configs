# ------------------------------------------------
# ZSH->CONFIGURATION -----------------------------
# ------------------------------------------------
autoload -U compinit
autoload zsh/terminfo
autoload colors && colors

source /etc/zsh/colors

# Initialize for compdef
compinit

# Allow for functions in the prompt
setopt promptsubst
setopt prompt_subst

# Enable auto-execution of functions.
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

setopt nohup
setopt no_check_jobs
setopt extendedglob
setopt extended_glob
setopt no_nomatch
setopt alwaystoend

# vi mode
#bindkey -v

HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.history
ORIGINAL_HISTFILE=$HISTFILE

# ------------------------------------------------
# UTILITY->SOURCING ------------------------------
# ------------------------------------------------
alias resource="unset ZSHRC_SOURCED; source ~/.zshrc"

function source-if-exists()
{
  _path=$1

  if [[ -f $_path ]] ; then
    source $_path
  fi
}

command-exists() {
  (command -v $1 >/dev/null 2>&1)
}

# ------------------------------------------------
# PATHS ------------------------------------------
# ------------------------------------------------
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:$HOME/.bin/bin
export PATH=$PATH:$HOME/.bin/.bin

_os_bin_path="$HOME/.bin/bin-`uname`"

if [[ -d $_os_bin_path ]] ; then
  export PATH=$PATH:$_os_bin_path
fi

unset _os_bin_path

export PATH=$PATH:$HOME/.gexecute
export PATH=$PATH:$HOME/.android/bin
export PATH=$PATH:$HOME/.android/platform-tools
export PATH=$PATH:$HOME/.neo4j-bin
export PATH=$PATH:$HOME/.repositories/mkdir-scripts/bin

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib

# ------------------------------------------------
# SWITCHES ---------------------------------------
# ------------------------------------------------
export ON_DARWIN=false
export ON_LINUX=false
export ON_MICRO=false
export ON_MICRO_PUCK=false
export SSHED=false

case `uname` in
  "Darwin")
    ON_DARWIN=true
    ;;
  "Linux")
    ON_LINUX=true
    ;;
esac

if command-exists micro-localhost-is-micro && micro-localhost-is-micro ; then
  ON_MICRO=true
fi

# http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [[ -n ${SSH_CLIENT} ]]; then; SSHED=true; fi

# ------------------------------------------------
# UNIX -------------------------------------------
# ------------------------------------------------
if ( $ON_DARWIN ) ; then
  alias l="ls -lh -G"
  alias ls="ls -G"
  alias la="ls -lha -G"
  alias lf="ls -lh -G | grep -i"
  alias lfa="ls -lha -G | grep -i"
else
  alias l="ls -lh --color"
  alias ls="ls --color"
  alias la="ls -lha --color"
  alias lf="ls -lh --color | grep -i"
  alias lfa="ls -lha --color | grep -i"
fi

alias lc="ls -1 | wc -l"
alias b="cd .."
alias f="cd -"
alias x="exit"
alias c="clear"
alias sd="sudo"
alias s="sudo su"
#alias d="date && cal"
alias reboot="sudo reboot"
alias halt="sudo halt"
alias ts="du -sh"
alias grep="grep --color"
alias lsdir="ls -d */"
alias lsadir="ls -d .*/"
alias rs="clear; rspec --format nested --color $*"
alias sc="screen"
alias scl="screen -ls"
alias t="tmux"
#alias ccat="pygmentize -g"
alias ccat="vimcat"

psg()
{
  if [[ -z $1 ]] ; then
    echo "$0: usage: QUERY"
  fi
}
mw()
{
  mv "$@" && cd "${@[-1]}";
}
gst()
{
  grep -IHiRe $1 ./ ;
}
fnd()
{
  _name="$1"
  shift
  find ./ -iname "*$_name*" $* ;
}
is-sshed()
{
  if ( $SSHED ); then; return 0; else return 1; fi
}
rex()
{
  sudo reboot &>/dev/null exit
}
pox()
{
  sudo shutdown -h now &>/dev/null exit
}

# ------------------------------------------------
# SCREEN -----------------------------------------
# ------------------------------------------------
alias torrent="screen -d -R torrent"

# ------------------------------------------------
# OPEN -------------------------------------------
# ------------------------------------------------
#function o()
#{
    #if [[ -z $1 ]] ; then
        #echo "usage: $0:"
        #return 1
    #fi

    #file=$1

    #if [[ ! -f $file ]] ; then
        #echo "fatal: File does not exist or is not ordinary (i.e., directory or symbolic link)"
        #return 1
    #fi

    #case $file in
        ## evince
        #*.(pdf|png|jpg))
        #evince $file
        #;;
        ## gimp
        #*.(xcf))
        #gimp $file
        #;;
        ## dia
        #*.(dia))
        #dia $file
        #;;
        ## inkscape
        #*.(svg))
        #inkscape $file
        #;;
        ## word
        #*.(doc|docx|docm))
        #word $file
        #;;
        ## excel
        #*.(xls|xlsx|xlsm))
        #excel $file
        #;;
        ## powerpoint
        #*.(ppt|pptx|pptm))
        #powerpoint $file
        #;;
        ## default
        #*)
        #echo "fatal: Not a supported filetype"
        #return 1
        #;;
    #esac
#}

# ------------------------------------------------
# RUN --------------------------------------------
# ------------------------------------------------
function r() {
  if [[ ! -x ./run ]] ; then
    echo "fatal: ./run does not exist or is not executable."
    return 1
  fi

  clear
  ./run $*
}

alias rr="reset; r"

# ------------------------------------------------
# HISTORY ----------------------------------------
# ------------------------------------------------
function disable-history-for-session() {
  HISTFILE=/dev/null
  echo "HISTFILE set to /dev/null."
}

# ------------------------------------------------
# ALIASES/FUNCTIONS ------------------------------
# ------------------------------------------------
alias tree="tree -C"
alias treed="tree -C -d"
alias update="sudo apt-get update && sudo apt-get dist-upgrade"
alias mp="mplayer -fs"
alias ra="clear && ./reset-all"
alias use-opendns="sudo cp /etc/resolv.conf.opendns /etc/resolv.conf"
alias use-google-dns="sudo cp /etc/resolv.conf.google /etc/resolv.conf"
alias sync-time-san-francisco="sudo ntpdate tick.ucla.edu"
alias sync-time-chicago="sudo ntpdate ntp-1.mcs.anl.gov"
alias wake="export DISPLAY=:0.0 && xset dpms force on"
alias blank="export DISPLAY=:0.0 && xset dpms force off"
alias expdisp="export DISPLAY=:0.0"
alias emacs="emacs -nw"
alias slime="emacs -nw -f slime"
alias push="./push $*"
alias rails-env-production="export RAILS_ENV=production"
alias rails-env-development="export RAILS_ENV=development"
alias re-p="rails-env-production"
alias re-d="rails-env-development"
alias rails-env-test="export RAILS_ENV=test"
alias v="vim"
alias dv="ssh desktop-virtual"
alias o="ofe"
alias np="notify-push"
alias p="pwd"
alias sshn="ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias dh="disable-history-for-session"
alias ht="htop"
alias htn="htop --user=nobody"
alias gpi="grep --ignore-case"
alias pgrep="pgrep -il"

if [[ "$USER" != "root" ]] ; then
  alias apt-get="sudo apt-get"
  alias apt="sudo apt"
  alias aptitude="sudo aptitude"
  alias service="sudo service"
  alias dpkg="sudo dpkg"
  alias updatedb="sudo updatedb"
  alias locate="sudo locate"
fi

if ( $ON_DARWIN ) ; then
  alias htop="sudo htop"
  alias op="open"
fi

if ( $ON_LINUX ) ; then
  if [[ $USER != $ROOT ]] ; then
    alias ifconfig="/sbin/ifconfig"
  fi
fi

function mvw() {
  mv $* && cd $2
}

# startx
function sx()
{
  startx &

  sleep 1.5

  export DISPLAY=:0.0

  if [[ $1 == "m" ]] ; then
    display-mode monitor
  else
    display-mode no-monitor
  fi
}

# extract
function ex()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1;;
      *.tar.gz)    tar xvzf $1;;
      *.bz2)       bunzip2 $1;;
      *.rar)       unrar x $1;;
      *.gz)        gunzip $1;;
      *.tar)       tar xvf $1;;
      *.tbz2)      tar xvjf $1;;
      *.tgz)       tar xvzf $1;;
      *.zip)       unzip $1;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1;;
      *.xz)        unxz $1;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
    return 1
  fi
}

function rsync-partial()
{
    rsync --partial --progress --rsh=ssh $*
}

function rm-history() {

  if [[ $HISTFILE != $ORIGINAL_HISTFILE ]]; then
    echo "fatal: HISTFILE does not match the originally set HISTFILE location. Exiting."
    return 1
  fi

  if [[ -z $HISTFILE ]] ; then
    echo "fatal: HISTFILE not set."
    return 1
  fi

  echo "Removing $HISTFILE"

  _other_history_paths="~/.bash_history ~/.sh_history ~/.zsh_history"

  rm $HISTFILE

  if prompt "Also remove other histories?\n  - ~/.bash_history\n  - ~/.directory_history/*\n  - ~/.sh_history\n  - ~/.zsh_history"; then
    rm $HOME/.bash_history
    exit
  fi
}

# ------------------------------------------------
# STTY -------------------------------------------
# ------------------------------------------------

# Prevent C-s from hanging terminal
# http://unix.stackexchange.com/questions/72086/ctrl-s-hang-terminal-emulator
stty -ixon

# ------------------------------------------------
# PROMPTS ----------------------------------------
# ------------------------------------------------
function pwd-is-wd-character() {
  if command-exists pwd-is-wd && pwd-is-wd ; then
    echo "*"
  elif [[ $PWD == $HOME ]] ; then
    echo "~"
  else
    echo " "
  fi
}

function pwd-home-count() {
  if [[ $PWD == $HOME ]] ; then

    _home_count=`ls -1 | count-lines`

    if ( $ON_DARWIN ) ; then
      let _home_count=_home_count-28
    fi

    if [[ $_home_count > 0 ]] ; then
      echo -n "+$_home_count"
    fi

  fi
}

# Root
# ------------------------------------------------
if [[ $USER == "root" ]] ; then
  PROMPT=$'%{\e[31m%}%m# %{\e[0m%}'

# Non-Privileged
# ------------------------------------------------
else
  if ( $SSHED ) ; then
    PROMPT=$'->%{$fg_bold[blue]%}[SSH]%{$reset_color%}-[%{$fg_bold[white]%}$(pwd-is-wd-character)%{$reset_color%}]$(pwd-home-count)->%{$fg[magenta]%}%m$%{$reset_color%} '
  else
    PROMPT=$'%{$fg[green]%}%m$%{$reset_color%} '
  fi
fi

# Right-hand prompt
RPROMPT="%{$fg_bold[black]%}%~%{$reset_color%}"

if ( $ON_DARWIN ) ; then

  # Terminal.app has problems with bold black (grey).
  RPROMPT="%{$fg[white]%}%~%{$reset_color%}"

  alias del="rmtrash"

fi

# ------------------------------------------------
# GI ---------------------------------------------
# ------------------------------------------------

# Go to git repository I'm inside.
function gi() {
  _toplevel=`git rev-parse --show-toplevel || return`

  cd-skip-chpwd $_toplevel

  clear
  ls -lh
  g
  stylize `pwd-tilde`"\n"
}

# ------------------------------------------------
# PRECMD -----------------------------------------
# ------------------------------------------------
function _base_precmd() {
  if [[ $HISTFILE = "/dev/null" ]] ; then
    echo `stylize "History disabled."`
  fi

  if ( $ON_LINUX ) ; then
    if ! swap-empty; then
      echo -e "${On_IRed}${BWhi}Swap usage is > 0${RCol}"
    fi
  fi

}

# Split these so that if we override precmd elsewhere
# we can always call _base_precmd.
function precmd() {
  _base_precmd
}

# ------------------------------------------------
# CHPWD ------------------------------------------
# ------------------------------------------------
function cd-skip-chpwd() {
  SKIP_CHPWD=true
  cd $*
  SKIP_CHPWD=false
}

function chpwd() {

  if [[ $SKIP_CHPWD == true ]] ; then
    return
  fi

  if [[ $PWD == $HOME ]] ; then
    clear
  fi

  command-exists _g_chpwd && _g_chpwd
}

# ------------------------------------------------
# ENV->EDITOR/NVIM -------------------------------
# ------------------------------------------------
if command-exists nvim; then
  export EDITOR="nvim"
  alias vim="nvim"
else
  export EDITOR="vim"
fi

